// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Detect if we're in local development with local Supabase
const isLocalDev = import.meta.env.DEV && import.meta.env.VITE_SUPABASE_URL?.includes('127.0.0.1');

// Use local development URL if available, otherwise fallback to production
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://vdjsfupbjtbkpuvwffbn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZkanNmdXBianRia3B1dndmZmJuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQyMjc4MTMsImV4cCI6MjA2OTgwMzgxM30.3sLKA1llE4tRBUaLzZhlLqzvM14d9db5v__GIvwvSng";

console.log('[Supabase] Using URL:', SUPABASE_URL);
console.log('[Supabase] Local development:', isLocalDev);
if (import.meta.env.VITE_DISABLE_AUTH_LOGS === 'true') {
  console.log('[Supabase] Auth logging disabled via VITE_DISABLE_AUTH_LOGS');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    debug: import.meta.env.VITE_DISABLE_AUTH_LOGS !== 'true' && import.meta.env.VITE_DEBUG_MODE === 'true',
    storageKey: isLocalDev ? 'sb-local-auth-token' : 'sb-vdjsfupbjtbkpuvwffbn-auth-token',
    flowType: 'pkce'
  },
  global: {
    headers: {
      'x-yacht-client': 'web-app',
      'x-client-info': 'yacht-sentinel-ai@1.0.0',
      'x-environment': isLocalDev ? 'local' : 'production'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: isLocalDev ? 10 : 10,
      log_level: 'fatal' // Minimize realtime logs
    },
    heartbeatIntervalMs: isLocalDev ? 30000 : 30000, // Less frequent heartbeats
    reconnectAfterMs: isLocalDev ? (attempt) => Math.min(10000, Math.pow(2, attempt) * 1000) : undefined
  }
});

// Helper function to clear invalid authentication tokens
export const clearInvalidAuthTokens = async () => {
  try {
    // Clear localStorage auth tokens for both local and production
    const authKeys = [
      'sb-vdjsfupbjtbkpuvwffbn-auth-token', // production
      'sb-local-auth-token' // local development
    ];
    
    authKeys.forEach(authKey => {
      localStorage.removeItem(authKey);
      localStorage.removeItem(`${authKey}.0`);
      localStorage.removeItem(`${authKey}.1`);
    });
    
    // Sign out to clear any remaining session
    await supabase.auth.signOut();
    
    console.log('[Auth] Invalid tokens cleared for both environments');
  } catch (error) {
    console.error('[Auth] Error clearing tokens:', error);
  }
};

// Enhanced auth state monitoring with minimal logging
supabase.auth.onAuthStateChange(async (event, session) => {
  const envLabel = isLocalDev ? '[LOCAL]' : '[PROD]';
  
  // Only log critical auth events to reduce console noise
  if (event === 'SIGNED_IN' || event === 'SIGNED_OUT') {
    console.log(`[Auth]${envLabel} ${event}:`, session?.user?.email || 'no user');
  }
  
  if (event === 'TOKEN_REFRESHED') {
    if (!session) {
      console.log(`[Auth]${envLabel} Token refresh failed, clearing invalid tokens`);
      await clearInvalidAuthTokens();
    }
  }
  
  if (event === 'SIGNED_OUT') {
    await clearInvalidAuthTokens();
  }
});

// Connection health check for local development
if (isLocalDev) {
  const checkConnection = async () => {
    try {
      const { data, error } = await supabase.from('yachts').select('count').limit(1);
      if (error) {
        console.warn('[Supabase][LOCAL] Connection test failed:', error.message);
      } else {
        console.log('[Supabase][LOCAL] Connection test successful');
      }
    } catch (error) {
      console.warn('[Supabase][LOCAL] Connection test error:', error);
    }
  };
  
  // Check connection after a short delay
  setTimeout(checkConnection, 1000);
}